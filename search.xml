<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo介绍</title>
    <url>/2017/05/26/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>本站の有趣☞言论</category>
      </categories>
  </entry>
  <entry>
    <title>jQuery对表单的操作及更多应用</title>
    <url>/2017/05/26/%E4%BB%8A%E6%97%A5%E5%BB%BA%E7%AB%8B%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="今天建立了新的博客"><a href="#今天建立了新的博客" class="headerlink" title="今天建立了新的博客"></a>今天建立了新的博客</h2><p>不得不说hexo真的好用,可以说对新手非常友好了,但是还有一些尚不明确,代我探索探索</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>ncie</tag>
        <tag>yoku</tag>
      </tags>
  </entry>
  <entry>
    <title>分支语句2switchcase结构</title>
    <url>/2017/05/26/%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A52switchcase%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="switch-case结构"><a href="#switch-case结构" class="headerlink" title="switch-case结构"></a>switch-case结构</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543383.png" alt="image-20221017184121486"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543794.png" alt="image-20221017184256181"></p>
<p>如果上面的case都没有执行,那就default</p>
<h3 id="与if-else不同-swichcase结构在锁定条件之后会继续执行被满足条件的下面的语句-如"><a href="#与if-else不同-swichcase结构在锁定条件之后会继续执行被满足条件的下面的语句-如" class="headerlink" title="与if else不同,swichcase结构在锁定条件之后会继续执行被满足条件的下面的语句,如:"></a>与if else不同,swichcase结构在锁定条件之后会继续执行被满足条件的下面的语句,如:</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543278.png" alt="image-20221017184712683"></p>
<p>输出结果为   two   three  other </p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544057.png" alt="image-20221017184802142"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544167.png" alt="image-20221017184912163"></p>
<p>switch 结构中的表达式只能是如下的六种类型之一</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544265.png" alt="image-20221017185011210"> </p>
<p>case之后只能声明常量,不能声明范围</p>
<p> <img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544029.png" alt="image-20221017185436123"></p>
<p>像这种就是错的</p>
<p>break词缀是可选的</p>
<p>default相当于if,else中的else,并且位置是可选的,放哪都行,但是没有break还是会向下执行,一般就写在最后一行就行</p>
<p>如果多个case的执行语句相同,可以进行合并</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544274.png" alt="image-20221017185947105"></p>
<p>其实就是相当于没写break</p>
<h3 id="试题-请输入2019年的day和month-问这是第几天"><a href="#试题-请输入2019年的day和month-问这是第几天" class="headerlink" title="试题:请输入2019年的day和month,问这是第几天"></a>试题:请输入2019年的day和month,问这是第几天</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544177.png" alt="image-20221017190407826"></p>
<p>如果这么写,就冗余了</p>
<p>解决冗余的方法:</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544348.png" alt="image-20221017190628512"></p>
<h2 id="switchcase与ifelse转换的说明"><a href="#switchcase与ifelse转换的说明" class="headerlink" title="switchcase与ifelse转换的说明"></a>switchcase与ifelse转换的说明</h2><ul>
<li>switchcase结构如果要判断的表达式太多,一般用整除的方法</li>
</ul>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544268.png" alt="image-20221017191156918"></p>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>循环语句</title>
    <url>/2017/05/26/%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="循环语句的基本组成"><a href="#循环语句的基本组成" class="headerlink" title="循环语句的基本组成"></a>循环语句的基本组成</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555466.png" alt="image-20221017191515128"></p>
<h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><h3 id="for循环的四个要素"><a href="#for循环的四个要素" class="headerlink" title="for循环的四个要素"></a>for循环的四个要素</h3><ul>
<li>初始化条件</li>
<li>循环条件   —–&gt;布尔类型</li>
<li>循环体</li>
<li>迭代条件</li>
</ul>
<h3 id="for循环的结构"><a href="#for循环的结构" class="headerlink" title="for循环的结构"></a>for循环的结构</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555902.png" alt="image-20221017191909805"></p>
<p>迭代条件添加多条语句用逗号,用;号会报错</p>
<p>初始化条件就是进入for语句后先执行的语句,你也可以不填</p>
<p>for循环和while循环可以相互转换</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555500.png" alt="image-20221017193532881"></p>
<h1 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h1><p>循环结构</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555456.png" alt="image-20221019100754024"></p>
<p>写while循环千万小心别丢迭代条件④,否则就会进入死循环</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555745.png" alt="image-20221019101047652"></p>
<h4 id="for循环里的参数只能在for循环里用-而while出了循环结构依然可以调用"><a href="#for循环里的参数只能在for循环里用-而while出了循环结构依然可以调用" class="headerlink" title="for循环里的参数只能在for循环里用,而while出了循环结构依然可以调用"></a>for循环里的参数只能在for循环里用,而while出了循环结构依然可以调用</h4><p>for与while的区别是初始化条件部分的作用范围不同</p>
<h1 id="dowhile循环"><a href="#dowhile循环" class="headerlink" title="dowhile循环"></a>dowhile循环</h1><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555434.png" alt="image-20221019101655308"></p>
<p>先执行do内部的内容,然后再判断执行条件</p>
<p>do-while循环至少会进行一次循环体</p>
<p>开发中,do和while使用多一点,do while使用较少</p>
<h5 id="循环体中加入break即可退出循环"><a href="#循环体中加入break即可退出循环" class="headerlink" title="循环体中加入break即可退出循环"></a>循环体中加入break即可退出循环</h5><h2 id="while-true-结构"><a href="#while-true-结构" class="headerlink" title="while (true)结构"></a>while (true)结构</h2><p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221020143005745.png" alt="image-20221020143005745"></p>
<p>用true开启循环,用break跳出循环</p>
<p>如果是for循环,那就空着,也算默认开启状态</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555400.png" alt="image-20221020143331386"></p>
<h2 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555502.png" alt="image-20221020163339462"></p>
<p>循环内再循环</p>
<p>内层循环结构遍历一遍,相当于外层循环体执行了一次</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555081.png" alt="image-20221020164932600"></p>
<p>这是一种控制行列的写法</p>
<p>多学学人家,然后才能搞创新 <img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555144.png" alt="image-20221020171137000"></p>
<p>99乘法表</p>
<h2 id="多重循环"><a href="#多重循环" class="headerlink" title="多重循环"></a>多重循环</h2>]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>数组</title>
    <url>/2017/05/26/%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="数组的概述"><a href="#数组的概述" class="headerlink" title="数组的概述"></a>数组的概述</h2><p><strong>数组是多个相同类型数据按一定顺序排列的集合,并使用一个名字命名,并通过编号的方式对这些数组进行统一管理</strong></p>
<h3 id="数组的常见概念"><a href="#数组的常见概念" class="headerlink" title="数组的常见概念"></a>数组的常见概念</h3><ul>
<li>数组名</li>
<li>下标和索引</li>
<li>元素</li>
<li>数组的长度</li>
</ul>
<p> <img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549491.png" alt="image-20221024195737285"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549640.png" alt="image-20221024195942730"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549415.png" alt="image-20221024200110712"></p>
<h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><h4 id="一维数组的6个事情"><a href="#一维数组的6个事情" class="headerlink" title="一维数组的6个事情"></a>一维数组的6个事情</h4><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549766.png" alt="image-20221024200318391"></p>
<h3 id="一维数组的声明和初始化"><a href="#一维数组的声明和初始化" class="headerlink" title="一维数组的声明和初始化"></a>一维数组的声明和初始化</h3><p>int num (初始化)</p>
<p>num = 0 (声明1)<img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549213.png" alt="image-20221024201554692"></p>
<p>引用数据类型需要加new</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549089.png" alt="image-20221025182712935"></p>
<p>数组一旦初始化完成,就无法改变长度了</p>
<h2 id="调用数组指定位置的元素-通过角标的方式调用"><a href="#调用数组指定位置的元素-通过角标的方式调用" class="headerlink" title="调用数组指定位置的元素:通过角标的方式调用"></a>调用数组指定位置的元素:通过角标的方式调用</h2><p>数组的角标是从0开始的,到长度-1结束</p>
<p>只要不是跟数据库交互的,都是从0开始</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549771.png" alt="image-20221025183924575"></p>
<h2 id="如何获取数组的长度"><a href="#如何获取数组的长度" class="headerlink" title="如何获取数组的长度"></a>如何获取数组的长度</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549230.png" alt="image-20221025184022419"></p>
<h2 id="如何遍历数组元素"><a href="#如何遍历数组元素" class="headerlink" title="如何遍历数组元素"></a>如何遍历数组元素</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550536.png" alt="image-20221025184134345"></p>
<h2 id="数组元素的默认初始化值"><a href="#数组元素的默认初始化值" class="headerlink" title="数组元素的默认初始化值"></a>数组元素的默认初始化值</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550632.png" alt="image-20221025184504536"></p>
<p>整型的默认值为0</p>
<p>浮点型的是0.0</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550819.png" alt="image-20221025184757056">char型\</p>
<p>不带引号的是assic码,带的是字符</p>
<p>布尔类型是false</p>
<h3 id="引用数据类型的初始化值"><a href="#引用数据类型的初始化值" class="headerlink" title="引用数据类型的初始化值"></a>引用数据类型的初始化值</h3><p>String是null(换句话说null只属于string?)并且这个null不用加引号</p>
<h2 id="内存解析的简单说明"><a href="#内存解析的简单说明" class="headerlink" title="内存解析的简单说明"></a>内存解析的简单说明</h2><p> <img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550290.png" alt="image-20221025191411768"></p>
<p>局部变量都放在栈当中</p>
<p>连续的数值(如数组)保存在堆当中</p>
<p>给数组赋值就是改变了格子内的内容</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550076.png" alt="image-20221026181439422"></p>
<h2 id="10-26号作业中产生的一些方法"><a href="#10-26号作业中产生的一些方法" class="headerlink" title="10.26号作业中产生的一些方法"></a>10.26号作业中产生的一些方法</h2><h3 id="双重嵌循环"><a href="#双重嵌循环" class="headerlink" title="双重嵌循环"></a>双重嵌循环</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550182.png" alt="image-20221026181639825"></p>
<h3 id="向数组中写入多个数据"><a href="#向数组中写入多个数据" class="headerlink" title="向数组中写入多个数据"></a>向数组中写入多个数据</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550384.png" alt="image-20221026181719267"></p>
<h3 id="比较数组内数据大小的方法"><a href="#比较数组内数据大小的方法" class="headerlink" title="比较数组内数据大小的方法"></a>比较数组内数据大小的方法</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550162.png" alt="image-20221026181844909"></p>
<h3 id="数组套数组"><a href="#数组套数组" class="headerlink" title="数组套数组"></a>数组套数组<img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550155.png" alt="image-20221026182017712"></h3><h2 id="多维数组的使用"><a href="#多维数组的使用" class="headerlink" title="多维数组的使用"></a>多维数组的使用</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550435.png" alt="image-20221026182941088"></p>
<h2 id="二位数组的初始化和声明"><a href="#二位数组的初始化和声明" class="headerlink" title="二位数组的初始化和声明"></a>二位数组的初始化和声明</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550742.png" alt="image-20221026184756118"></p>
<p>你可以将其理解为表格</p>
<p>如果是3维以上,你也可以这么理解</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550018.png" alt="image-20221027160207386"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550518.png" alt="image-20221027160312082"></p>
<p>一维的也能这样</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550029.png" alt="image-20221027160433476"></p>
<h2 id="二维数组的调用"><a href="#二维数组的调用" class="headerlink" title="二维数组的调用"></a>二维数组的调用</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550617.png" alt="image-20221027160652280"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550643.png" alt="image-20221027160915537"></p>
<h2 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度"></a>获取数组的长度</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551178.png" alt="image-20221027161404904"></p>
<h2 id="如何遍历二维数组"><a href="#如何遍历二维数组" class="headerlink" title="如何遍历二维数组"></a>如何遍历二维数组</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551829.png" alt="image-20221027161833244"></p>
<h2 id="二维数组的默认初始化值"><a href="#二维数组的默认初始化值" class="headerlink" title="二维数组的默认初始化值"></a>二维数组的默认初始化值</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551324.png" alt="image-20221030162532004"></p>
<p>第一个指向的是地址值,并且有几个中括号就说明是几维的数组</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551109.png" alt="image-20221030162957208"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551861.png" alt="image-20221030163002562"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551578.png" alt="image-20221030163030556"></p>
<p>应为后面啥也没有,所以为空(null)</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551171.png" alt="image-20221030163311033"></p>
<h3 id="二维数组的内存解析"><a href="#二维数组的内存解析" class="headerlink" title="二维数组的内存解析"></a>二维数组的内存解析</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551003.png" alt="image-20221030163722839"></p>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>数组的巩固练习</title>
    <url>/2017/05/26/%E6%95%B0%E7%BB%84%E7%9A%84%E5%B7%A9%E5%9B%BA%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551240.png" alt="image-20221030170258216"></p>
<p>这里的x是一维数组,y是二维数组,并且<img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551053.png" alt="image-20221030170447869">是给x和y分别赋值</p>
<h3 id="杨辉三角"><a href="#杨辉三角" class="headerlink" title="杨辉三角"></a>杨辉三角</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551519.png" alt="image-20221030170758474"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551485.png" alt="image-20221031104530699"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551702.png" alt="image-20221031104547297"></p>
<h2 id="数组的常见算法"><a href="#数组的常见算法" class="headerlink" title="数组的常见算法"></a>数组的常见算法</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552340.png" alt="image-20221031105743708"></p>
<p>随机数公式<img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552030.png" alt="image-20221102100629389"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552108.png" alt="image-20221109103525941"></p>
<p>数组的复制</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552508.png" alt="image-20221102102000513">数组的复制,循环和查找</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552831.png" alt="image-20221102102221947"></p>
<p>中间变量法,首尾交换法</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552441.png" alt="image-20221102102528555"></p>
<p>二分法查找算法</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552529.png" alt="image-20221102110340769"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552899.png" alt="image-20221102110402722"></p>
<h3 id="排序算法-冒泡排序"><a href="#排序算法-冒泡排序" class="headerlink" title="排序算法:冒泡排序"></a>排序算法:冒泡排序</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552809.png" alt="image-20221107201532147"></p>
<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552365.png" alt="image-20221107202127692"></p>
<p>Arrays工具类的使用</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552856.png" alt="image-20221109101026041"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552701.png" alt="image-20221109101111754"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552317.png" alt="image-20221109101305988"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552573.png" alt="image-20221109101415211"></p>
<p>(fill是将数组值全部修改为设定值)</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552938.png" alt="image-20221109101525045"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552456.png" alt="image-20221109101603129"></p>
<p>(这个只能查找已经排序的数组)</p>
<h3 id="数组编写的常见错误"><a href="#数组编写的常见错误" class="headerlink" title="数组编写的常见错误"></a>数组编写的常见错误</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552999.png" alt="image-20221109101852664"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553269.png" alt="image-20221109101921930"></p>
<p>(空指针异常)</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553652.png" alt="image-20221109102028987"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553838.png" alt="image-20221109102110239"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553301.png" alt="image-20221109102147626"></p>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>特殊关键词的使用(break与continue)</title>
    <url>/2017/05/26/%E7%89%B9%E6%AE%8A%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%BF%E7%94%A8break&amp;contine/</url>
    <content><![CDATA[<h2 id="特殊关键字的使用-break与continue"><a href="#特殊关键字的使用-break与continue" class="headerlink" title="特殊关键字的使用(break与continue)"></a>特殊关键字的使用(break与continue)</h2><p>  <img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555945.png" alt="image-20221022134051259"></p>
<p> 注意,这两个关键字如果后面不可以声明语句,会报错,所以只能用这两个语句结尾</p>
<p> 并且是默认跳出包裹此关键字最近的for循环</p>
<p> 但是可以用标签来指定</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555312.png" alt="image-20221022135007927"></p>
<p>return语句</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555465.png" alt="image-20221022135206533"></p>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>算数运算符的使用</title>
    <url>/2017/05/26/%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553513.png" alt="image-20221012101401291"></p>
<h3 id="符号运算的注意点"><a href="#符号运算的注意点" class="headerlink" title="符号运算的注意点"></a>符号运算的注意点</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553366.png" alt="image-20221012102808342"></p>
<p>所以说提升运算与强制转换运算十分重要</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553100.png" alt="image-20221012103238704">最终被模数的符号和去出来的余是一样的</p>
<p>开发中经常用%来判断能否被整除<img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554441.png" alt="image-20221012103738982"><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554172.png" alt="image-20221012104035454"></p>
<p>自增是在表明的变量上加1</p>
<p>前自增先自增后赋值</p>
<p>后自增先赋值后自增</p>
<p>自增一不会改变自身变量的类型</p>
<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554391.png" alt="image-20221012111406124"><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554595.png" alt="image-20221012111541561"><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221012111653469.png" alt="image-20221012111653469"></p>
<p>注意,这里的等号是赋值,+=可以理解为赋值＋2</p>
<p>一样的还有-=   %=</p>
<p>这种写法不会改变变量本身的数据类型</p>
<p>用定义的话会自动提升</p>
<p>比如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">short s = <span class="number">10</span></span><br><span class="line">short a = s+<span class="number">1</span></span><br><span class="line"><span class="comment">//因为1是整形</span></span><br><span class="line"><span class="comment">//所以a会变成int值从而导致出错</span></span><br><span class="line">如果用++就没问题</span><br></pre></td></tr></table></figure>

<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554917.png" alt="image-20221012134612382"></p>
<p>注意,输出的结果都是布尔类型</p>
<p>注意=与==号的区别</p>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554936.png" alt="image-20221012140310668"></p>
<h4 id="逻辑和短路的区别"><a href="#逻辑和短路的区别" class="headerlink" title="逻辑和短路的区别"></a>逻辑和短路的区别</h4><p>逻辑前后都会执行,而短路如果前面的条件已经判定不会执行了,那么后面的程序也不会执行了</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554730.png" alt="image-20221012192114465"></p>
<p> <img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554716.png" alt="image-20221012192236261"></p>
<pre><code>## 位运算符
</code></pre>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554250.png" alt="image-20221012193101596"></p>
<p> <img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554602.png" alt="image-20221012193045786"></p>
<h4 id="这个用的比较少-为了加速学习这里不做详细说明-详情参考-day03-15"><a href="#这个用的比较少-为了加速学习这里不做详细说明-详情参考-day03-15" class="headerlink" title="这个用的比较少,为了加速学习这里不做详细说明,详情参考 day03  15"></a>这个用的比较少,为了加速学习这里不做详细说明,详情参考 day03  15</h4><h3 id="交换两个变量的值"><a href="#交换两个变量的值" class="headerlink" title="交换两个变量的值"></a>交换两个变量的值</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554934.png" alt="image-20221012193955300"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554429.png" alt="image-20221012194006274"></p>
<h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554853.png" alt="image-20221012194255682"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554226.png" alt="image-20221014075825076"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555850.png" alt="image-20221014075949565"></p>
<p>不相同的类型可以统一为一个结果 ,表达式1和表达式2必须是一致的<img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555129.png" alt="image-20221014080441296"></p>
<p>凡是可以使用三元运算符的地方都可以使用if,else结构</p>
<p>如果两种结构都可以使用,那么优先选择三元运算符,因为他简洁又高效</p>
<h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555129.png" alt="image-20221014081357625"></p>
<p>看似复杂,实际使用中只要用好小括号就行</p>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象-java类以及类的成员</title>
    <url>/2017/05/26/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-java%E7%B1%BB%E5%8F%8A%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98/</url>
    <content><![CDATA[<h3 id="java类以及类的成员-属性-方法-构造器-代码块-内部类"><a href="#java类以及类的成员-属性-方法-构造器-代码块-内部类" class="headerlink" title="java类以及类的成员:属性,方法,构造器;代码块,内部类"></a>java类以及类的成员:属性,方法,构造器;代码块,内部类</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544484.png" alt="image-20221110162529295"></p>
<h2 id="面向过程与面向对象"><a href="#面向过程与面向对象" class="headerlink" title="面向过程与面向对象"></a>面向过程与面向对象</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544177.png" alt="image-20221110164953202"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544854.png" alt="image-20221110165951763"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544863.png" alt="image-20221110170031878"></p>
<h3 id="java语言的基本元素-类与对象"><a href="#java语言的基本元素-类与对象" class="headerlink" title="java语言的基本元素:类与对象"></a>java语言的基本元素:类与对象</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545183.png" alt="image-20221110170335418"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545291.png" alt="image-20221110170559944"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545069.png" alt="image-20221110170706319"></p>
<h3 id="类的结构-属性与方法"><a href="#类的结构-属性与方法" class="headerlink" title="类的结构:属性与方法"></a>类的结构:属性与方法</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545680.png" alt="image-20221110171238179"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545651.png" alt="image-20221113151740802"> </p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545813.png" alt="image-20221113151947760"></p>
<h2 id="创建类的对象"><a href="#创建类的对象" class="headerlink" title="创建类的对象"></a>创建类的对象</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545767.png" alt="image-20221113152239822"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">person</span>;</span><br><span class="line"><span class="comment">//创建类的对象=类的实例化=实例化类</span></span><br><span class="line"><span class="comment">//调用对象的结构:属性,方法</span></span><br><span class="line"><span class="comment">//调用属性:&quot;对象.属性&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545640.png" alt="image-20221113152826043"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545636.png" alt="image-20221113153114797"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p1成为了类的实例,并且属性就是成员变量</span><br></pre></td></tr></table></figure>

<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546891.png" alt="image-20221113160220957"></p>
<h4 id="如果创建了一个类的多个对象-那么每个对象都独立的拥有一套类的属性"><a href="#如果创建了一个类的多个对象-那么每个对象都独立的拥有一套类的属性" class="headerlink" title="如果创建了一个类的多个对象,那么每个对象都独立的拥有一套类的属性"></a>如果创建了一个类的多个对象,那么每个对象都独立的拥有一套类的属性</h4><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546429.png" alt="image-20221113161151863"></p>
<p>地址值是相同的,至于为什么 p3=p1,大概是因为类型是相同的所以省略了后缀吧</p>
<h2 id="对象的内存解析"><a href="#对象的内存解析" class="headerlink" title="对象的内存解析"></a>对象的内存解析</h2><p> <img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546055.png" alt="image-20221113161354349"></p>
<p>这是对象的具体内存结构</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546399.png" alt="image-20221113161824120"></p>
<h2 id="属性与局部变量的对比"><a href="#属性与局部变量的对比" class="headerlink" title="属性与局部变量的对比"></a>属性与局部变量的对比</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546783.png" alt="image-20221113164125220"></p>
<p>属性可以声明权限</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546408.png" alt="image-20221113164142504"></p>
<p>其实就是变量一类的东西放的位置不同,他的功能也就不同,</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546928.png" alt="image-20221113164403247"></p>
<p>局部变量在调用时都必须赋值</p>
<p>形参在调用时赋值即可</p>
<h3 id="局部变量与属性加载的位置不同"><a href="#局部变量与属性加载的位置不同" class="headerlink" title="局部变量与属性加载的位置不同"></a>局部变量与属性加载的位置不同</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546212.png" alt="image-20221113193414879"></p>
<h2 id="方法举例与格式的说明"><a href="#方法举例与格式的说明" class="headerlink" title="方法举例与格式的说明"></a>方法举例与格式的说明</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546559.png" alt="image-20221115163831432"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void表示没有返回值</span><br><span class="line">有string的表示返回值为string</span><br><span class="line">()内写的是形参</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> <img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546229.png" alt="image-20221115164258700"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546343.png" alt="image-20221115164343471"></p>
<h3 id="方法的声明"><a href="#方法的声明" class="headerlink" title="方法的声明"></a>方法的声明</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">权限修饰符 返回值类型 方法名(形参列表)&#123;方法体&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546716.png" alt="image-20221115164555548"></p>
<h4 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private.public,缺省,protected--封装性再细说,默认都先使用public</span><br></pre></td></tr></table></figure>

<h4 id="返回值类型"><a href="#返回值类型" class="headerlink" title="返回值类型"></a>返回值类型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果有返回值,必须在方法声明时,指定返回值的类型.同时方法中需要使用return来返回指定类型的变量或者常量</span><br></pre></td></tr></table></figure>

<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546529.png" alt="image-20221115165041333"></p>
<p>第一个时变量,第二个是常量</p>
<p>每一个可以输出的地方或者结果的地方都需要返回值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果方法没有返回值,则在方法声明时,使用void来表示,通常情况下不用return,但是可以使用return;来结束此方法</span><br><span class="line">return后不可以声明表达式</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h3 id="小结1"><a href="#小结1" class="headerlink" title="小结1"></a>小结1</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546640.png" alt="image-20221115165652260"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546009.png" alt="image-20221115165702139"></p>
<h3 id="方法名"><a href="#方法名" class="headerlink" title="方法名"></a>方法名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方法名属于标识符,要使用规范,遵循所见即所得原则</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="形参列表"><a href="#形参列表" class="headerlink" title="形参列表"></a>形参列表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可以声明一个或多个形参</span><br><span class="line">格式 :数据类型 形参,数据类型 形参.....</span><br><span class="line">只声明不赋值</span><br></pre></td></tr></table></figure>

<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547054.png" alt="image-20221116101717887"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547407.png" alt="image-20221116101841712"></p>
<h3 id="一些注意点"><a href="#一些注意点" class="headerlink" title="一些注意点"></a>一些注意点</h3><p>类内部的方法可以调用类的属性</p>
<p>方法内部可以调用方法</p>
<p>递归就是方法自己调用自己</p>
<p>方法中不能定义方法</p>
<h3 id="传输接受与返回"><a href="#传输接受与返回" class="headerlink" title="传输接受与返回"></a>传输接受与返回</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547610.png" alt="image-20221117101910110"></p>
<p>多理解理解</p>
<p>当然如果没有返回那直接写个sout也可以</p>
<h4 id="传参数的问题"><a href="#传参数的问题" class="headerlink" title="传参数的问题"></a>传参数的问题</h4><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547934.png" alt="image-20221117102137790"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547451.png" alt="image-20221117102144642"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">如果方法会调用类的属性,那么修改类,也可以更改参数</span><br><span class="line"></span><br><span class="line">如果用形参,传入数据,也是修改参数的一种方法</span><br><span class="line"></span><br><span class="line">但是这两种方法一旦弄混了,那就会出现各种奇怪的bug</span><br></pre></td></tr></table></figure>

<h3 id="对象与static的错误"><a href="#对象与static的错误" class="headerlink" title="对象与static的错误"></a>对象与static的错误</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547872.png" alt="image-20221117102529665"></p>
<p>如果你建方法时不用static,那么就必须造一个对象去调用,否则会出错,这里涉及到的点之后回去详细说明</p>
<h3 id="关于方法声明的一些练习"><a href="#关于方法声明的一些练习" class="headerlink" title="关于方法声明的一些练习"></a>关于方法声明的一些练习</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547085.png" alt="image-20221117145702406"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547737.png" alt="image-20221117145749766"></p>
<p>如果直接调用method方法,那么就必须把static给补上</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547102.png" alt="image-20221117150418016"></p>
<p>先强化造对象的过程再说别的</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547778.png" alt="image-20221117150645874"></p>
<p>虽然说里边是个方法,但是实际上返回值是变量,也就是最终结果是变量,所以可以放</p>
<h3 id="属性与形参"><a href="#属性与形参" class="headerlink" title="属性与形参"></a>属性与形参</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547084.png" alt="image-20221117152023865"></p>
<p>这个代码已经说明的很清楚了</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547621.png" alt="image-20221117152148621"></p>
<p>形参的调用</p>
<h3 id="重点好题⭐"><a href="#重点好题⭐" class="headerlink" title="重点好题⭐"></a>重点好题⭐</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547603.png" alt="image-20221117152920791"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547877.png" alt="image-20221117153215395"></p>
<p><strong>也就是说,数组里面啥都能装,可以装数字型,也能把对象给装进去.</strong></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547890.png" alt="image-20221117154558648"></p>
<p>换句话说这个数组的类是student类,的</p>
<p>具体原理参见柞与堆</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547105.png" alt="image-20221117153528207"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547563.png" alt="image-20221117153642066"></p>
<p>还可以利用类里面的方法进行编辑</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547499.png" alt="image-20221117154213954"></p>
<p>数组之间的使用必须是同类型的.</p>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象</title>
    <url>/2017/05/26/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A12/</url>
    <content><![CDATA[<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548133.png" alt="image-20221117170836337"></p>
<h2 id="万事万物皆对象"><a href="#万事万物皆对象" class="headerlink" title="万事万物皆对象"></a>万事万物皆对象</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548905.png" alt="image-20221117171914481"></p>
<h2 id="对象数组的内存结构"><a href="#对象数组的内存结构" class="headerlink" title="对象数组的内存结构"></a>对象数组的内存结构</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548264.png" alt="image-20221117173103843"></p>
<h2 id="匿名对象的使用"><a href="#匿名对象的使用" class="headerlink" title="匿名对象的使用"></a>匿名对象的使用</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548416.png" alt="image-20221117184719227"></p>
<p>直接这样打印打印出来的是地址值</p>
<p>  <img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548902.png" alt="image-20221117184937277"></p>
<p>1.这样写首先是调用对象的属性或方法</p>
<p>2.这是匿名对象的创建与调用,正常的是这样的<img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548411.png" alt="image-20221117185158657"></p>
<p>这new出来的对象是两个不同的对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">匿名对象只能调用一次,也就是一次性的</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548544.png" alt="image-20221117185843410"></p>
<h3 id="自定义数组的工具类"><a href="#自定义数组的工具类" class="headerlink" title="自定义数组的工具类"></a>自定义数组的工具类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给类命名的时候不要跟类库里的类重名</span><br></pre></td></tr></table></figure>

<h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>同一个类中,允许存在一个以上的同名方法,只要他们的参数个数或者参数类型不同即可</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548006.png" alt="image-20221130101446152"></p>
<p>如彼此名虽同,但是具体不同,这些这些便是方法的重载</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548152.png" alt="image-20221130104020210"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548800.png" alt="image-20221130104211527"></p>
<p>他和自动类型转换也有关</p>
<h2 id="可变个数的形参"><a href="#可变个数的形参" class="headerlink" title="可变个数的形参"></a>可变个数的形参</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548834.png" alt="image-20221130104412847"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548600.png" alt="image-20221202080801825"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549472.png" alt="image-20221202081350342"></p>
<p>此情况下优先考虑常规单个</p>
<p>可变参数参数个数也可以是0个</p>
<p>编译器会认为这两个参数是相同的</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549755.png" alt="image-20221202081635222"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549148.png" alt="image-20221202081843677"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549937.png" alt="image-20221202081851151"></p>
<p>实际上这就是一个数组,只不过写法简化了</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549422.png" alt="image-20221202081926884"></p>
<p>若是想直接传入数组也行</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549277.png" alt="image-20221202082209252"></p>
<p>可变形参必须声明在最后一个</p>
<h2 id="方法参数的值传递机制"><a href="#方法参数的值传递机制" class="headerlink" title="方法参数的值传递机制"></a>方法参数的值传递机制</h2><ul>
<li>变量的赋值</li>
</ul>
<p>基本类型变量不存在这些问题</p>
<p>引用数据类型赋值指向同一个堆</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549367.png" alt="image-20221202090314274"></p>
<ul>
<li>基本数据类型的值传递</li>
</ul>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549602.png" alt="image-20221202092456844"></p>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>程序流程控制</title>
    <url>/2017/05/26/%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h2 id="程序流程控制的几大结构"><a href="#程序流程控制的几大结构" class="headerlink" title="程序流程控制的几大结构"></a>程序流程控制的几大结构</h2><ul>
<li><p>顺序结构</p>
</li>
<li><p>分支结构</p>
</li>
<li><p>循环结构</p>
<h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281539392.png" alt="image-20221014082333576"><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281540328.png" alt="image-20221014082344584"></p>
</li>
</ul>
<p>​    <img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543615.png" alt="image-20221014082414516"></p>
<h2 id="使用scaner从键盘获取数据"><a href="#使用scaner从键盘获取数据" class="headerlink" title="使用scaner从键盘获取数据"></a>使用scaner从键盘获取数据</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543217.png" alt="image-20221014083258172"></p>
<p>对于char型变量,scaner没有获取的方法</p>
<p>程序是顺序执行的,如三选一,如果第一个分支行被指令被执行,那么后面的就不会再执行了<img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543325.png" alt="image-20221014093819429"></p>
<h4 id="if-else-结构可以互相嵌套"><a href="#if-else-结构可以互相嵌套" class="headerlink" title="if else 结构可以互相嵌套"></a>if else 结构可以互相嵌套</h4><p>但是层数最好不要超过3层</p>
<p>一是应为你自己绕不过来</p>
<p>二是 因为可读性太差</p>
<p>if语句如果只有一行那么大括号可以省略,但是最好不要这样做,因为这样经常会出错(比如回头检查时要补一行,就很麻烦)</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543956.png" alt="image-20221016200321392"></p>
<p>这种情况下else是就近原则</p>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
