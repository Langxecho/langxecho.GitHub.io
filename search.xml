<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git协作后总结</title>
    <url>/2023/02/01/git%E5%8D%8F%E4%BD%9C%E5%90%8E%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>直播后总结,以及部分github插件的涉及</p>
<p><a href="https://ssy-group.yuque.com/org-wiki-ssy-group-hclkne/revxml/dbg7ptlq0ta3733m">https://ssy-group.yuque.com/org-wiki-ssy-group-hclkne/revxml/dbg7ptlq0ta3733m</a></p>
]]></content>
      <categories>
        <category>工作室の茶馆</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo介绍</title>
    <url>/2017/05/26/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>本站の有趣☞言论</category>
      </categories>
  </entry>
  <entry>
    <title>分支语句2switchcase结构</title>
    <url>/2017/05/26/%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A52switchcase%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="switch-case结构"><a href="#switch-case结构" class="headerlink" title="switch-case结构"></a>switch-case结构</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543383.png" alt="image-20221017184121486"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543794.png" alt="image-20221017184256181"></p>
<p>如果上面的case都没有执行,那就default</p>
<h3 id="与if-else不同-swichcase结构在锁定条件之后会继续执行被满足条件的下面的语句-如"><a href="#与if-else不同-swichcase结构在锁定条件之后会继续执行被满足条件的下面的语句-如" class="headerlink" title="与if else不同,swichcase结构在锁定条件之后会继续执行被满足条件的下面的语句,如:"></a>与if else不同,swichcase结构在锁定条件之后会继续执行被满足条件的下面的语句,如:</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543278.png" alt="image-20221017184712683"></p>
<p>输出结果为   two   three  other </p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544057.png" alt="image-20221017184802142"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544167.png" alt="image-20221017184912163"></p>
<p>switch 结构中的表达式只能是如下的六种类型之一</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544265.png" alt="image-20221017185011210"> </p>
<p>case之后只能声明常量,不能声明范围</p>
<p> <img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544029.png" alt="image-20221017185436123"></p>
<p>像这种就是错的</p>
<p>break词缀是可选的</p>
<p>default相当于if,else中的else,并且位置是可选的,放哪都行,但是没有break还是会向下执行,一般就写在最后一行就行</p>
<p>如果多个case的执行语句相同,可以进行合并</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544274.png" alt="image-20221017185947105"></p>
<p>其实就是相当于没写break</p>
<h3 id="试题-请输入2019年的day和month-问这是第几天"><a href="#试题-请输入2019年的day和month-问这是第几天" class="headerlink" title="试题:请输入2019年的day和month,问这是第几天"></a>试题:请输入2019年的day和month,问这是第几天</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544177.png" alt="image-20221017190407826"></p>
<p>如果这么写,就冗余了</p>
<p>解决冗余的方法:</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544348.png" alt="image-20221017190628512"></p>
<h2 id="switchcase与ifelse转换的说明"><a href="#switchcase与ifelse转换的说明" class="headerlink" title="switchcase与ifelse转换的说明"></a>switchcase与ifelse转换的说明</h2><ul>
<li>switchcase结构如果要判断的表达式太多,一般用整除的方法</li>
</ul>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544268.png" alt="image-20221017191156918"></p>
]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery对表单的操作及更多应用</title>
    <url>/2017/05/26/%E4%BB%8A%E6%97%A5%E5%BB%BA%E7%AB%8B%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="今天建立了新的博客"><a href="#今天建立了新的博客" class="headerlink" title="今天建立了新的博客"></a>今天建立了新的博客</h2><p>不得不说hexo真的好用,可以说对新手非常友好了,但是还有一些尚不明确,代我探索探索</p>
]]></content>
      <categories>
        <category>java</category>
        <category>java领航</category>
      </categories>
      <tags>
        <tag>ncie</tag>
        <tag>yoku</tag>
      </tags>
  </entry>
  <entry>
    <title>循环语句</title>
    <url>/2017/05/26/%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="循环语句的基本组成"><a href="#循环语句的基本组成" class="headerlink" title="循环语句的基本组成"></a>循环语句的基本组成</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555466.png" alt="image-20221017191515128"></p>
<h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><h3 id="for循环的四个要素"><a href="#for循环的四个要素" class="headerlink" title="for循环的四个要素"></a>for循环的四个要素</h3><ul>
<li>初始化条件</li>
<li>循环条件   —–&gt;布尔类型</li>
<li>循环体</li>
<li>迭代条件</li>
</ul>
<h3 id="for循环的结构"><a href="#for循环的结构" class="headerlink" title="for循环的结构"></a>for循环的结构</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555902.png" alt="image-20221017191909805"></p>
<p>迭代条件添加多条语句用逗号,用;号会报错</p>
<p>初始化条件就是进入for语句后先执行的语句,你也可以不填</p>
<p>for循环和while循环可以相互转换</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555500.png" alt="image-20221017193532881"></p>
<h1 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h1><p>循环结构</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555456.png" alt="image-20221019100754024"></p>
<p>写while循环千万小心别丢迭代条件④,否则就会进入死循环</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555745.png" alt="image-20221019101047652"></p>
<h4 id="for循环里的参数只能在for循环里用-而while出了循环结构依然可以调用"><a href="#for循环里的参数只能在for循环里用-而while出了循环结构依然可以调用" class="headerlink" title="for循环里的参数只能在for循环里用,而while出了循环结构依然可以调用"></a>for循环里的参数只能在for循环里用,而while出了循环结构依然可以调用</h4><p>for与while的区别是初始化条件部分的作用范围不同</p>
<h1 id="dowhile循环"><a href="#dowhile循环" class="headerlink" title="dowhile循环"></a>dowhile循环</h1><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555434.png" alt="image-20221019101655308"></p>
<p>先执行do内部的内容,然后再判断执行条件</p>
<p>do-while循环至少会进行一次循环体</p>
<p>开发中,do和while使用多一点,do while使用较少</p>
<h5 id="循环体中加入break即可退出循环"><a href="#循环体中加入break即可退出循环" class="headerlink" title="循环体中加入break即可退出循环"></a>循环体中加入break即可退出循环</h5><h2 id="while-true-结构"><a href="#while-true-结构" class="headerlink" title="while (true)结构"></a>while (true)结构</h2><p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221020143005745.png" alt="image-20221020143005745"></p>
<p>用true开启循环,用break跳出循环</p>
<p>如果是for循环,那就空着,也算默认开启状态</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555400.png" alt="image-20221020143331386"></p>
<h2 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555502.png" alt="image-20221020163339462"></p>
<p>循环内再循环</p>
<p>内层循环结构遍历一遍,相当于外层循环体执行了一次</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555081.png" alt="image-20221020164932600"></p>
<p>这是一种控制行列的写法</p>
<p>多学学人家,然后才能搞创新 <img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555144.png" alt="image-20221020171137000"></p>
<p>99乘法表</p>
<h2 id="多重循环"><a href="#多重循环" class="headerlink" title="多重循环"></a>多重循环</h2>]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>视频转换工具万兴优转与下载工具motrix(附带百度云不限速方法)</title>
    <url>/2023/02/01/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB--%E7%8E%8B%E5%BA%86%E5%AE%87/</url>
    <content><![CDATA[<h3 id="为大家推荐两款工具"><a href="#为大家推荐两款工具" class="headerlink" title="为大家推荐两款工具"></a>为大家推荐两款工具</h3><blockquote>
<p><em><strong>一款集录制,格式转换,轻剪辑一体的工具———万兴优转<a href="https://download.mcloud.139.com/storageWeb/servlet/downloadServlet?code=S0IwczExZG85bFoxQ2IyMDIxN3RxQV9kbHF6&un=34002CED7AB72498642A3AB9FB333852BC52A25D756BBB6427BC252A6158E7E0&dom=D961&txType=0">下载</a></strong></em></p>
</blockquote>
<p>这个工具集成了海量的功能,能够满足各种各样的实际需求</p>
<img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302011228448.png" alt="image-20230201122806325" style="zoom:50%;" />

<img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302011228103.png" alt="image-20230201122829031" style="zoom:50%;" />

<p><strong>• 号称业界领先的APEXTRANS™技术，转换速度超快，且不会造成任何质量损失</strong><br><strong>• 高清无损压缩音视频，可视化调节视频大小及画质，压缩速度快，高清无损画质</strong><br><strong>• 支持高清无损压缩1000+格式，支持录制高清视频，支持4K和VR视频格式转换</strong><br><strong>• 支持10,000个视频网站（如YouTube、Netflix等视频站）下载并录制高清视频</strong></p>
<h3 id="特点描述"><a href="#特点描述" class="headerlink" title="特点描述"></a>特点描述</h3><ul>
<li>破解会员功能免登陆，第三方便携式处理，适度精简优化！</li>
<li>├—输出视频无水印、高速转换、批量转换、硬件加速等功能</li>
<li>├—解锁后的万兴优转会员版功能对比 uniconverter.cn/pay</li>
<li>预设配置：默认中文、启用高速转换、高速下载、GPU硬件加速</li>
<li>删除组件：传输设备组件和驱动、云盘组件、升级组件、多国语言</li>
<li>无 Wondershare Helper Compact 后台依赖程序，该组件已剔除</li>
</ul>
<blockquote>
<p>一款界面简洁优美的下载器,与百度云不限速下载的依附工具—motrix(类似IDM的全能资源下载器)<a href="https://download.mcloud.139.com/storageWeb/servlet/downloadServlet?code=S0IwczExZG85bFoxQ2IwODYxN3RxQV9pdGlq&un=802AEFA8A293AAA06786FAADEC6058EB6EEA6EE67B38F4D7934096066901D707&dom=D961&txType=0">下载</a></p>
</blockquote>
<p>Motrix是一款小巧实用的下载工具，它支持HTTP、FTP、BT、磁力链、等资源的下载，并且支持十个下载任务同时下载，用户在下载单个任务时最高支持64线程下载，在下载一个文件的时候如果中途需要停止的话，软件会自动帮助用户清除所有的附带文件，这样就不用担心会有残留文件的问题，是一款不错的下载工具。</p>
<h3 id="测试链接"><a href="#测试链接" class="headerlink" title="测试链接"></a>测试链接</h3><p><strong>想要成为影之实力者</strong></p>
<p>magnet:?xt=urn:btih:d985479a2beae9e4043fca253dd7685b665491f9&amp;tr=<a href="http://open.acgtracker.com:1096/announce">http://open.acgtracker.com:1096/announce</a></p>
<p><strong>2022年寒假我的世界服务器一期存档</strong></p>
<p>链接：<a href="https://pan.baidu.com/s/1IHBEn08DS7fH1Gtt5O4DYg">https://pan.baidu.com/s/1IHBEn08DS7fH1Gtt5O4DYg</a><br>提取码：y6k5</p>
<p><strong>PS2023</strong></p>
<p><a href="https://download.mcloud.139.com/storageWeb/servlet/downloadServlet?code=S0ExNjExaXB0UlkxRUwyMDIxN3RxQV9vREQ5&amp;un=08BE6223C9F1895A92D13A0293E3E680CB4D8349B6BF4AC5D7AB8EDE4996C911&amp;dom=D961&amp;txType=0">https://download.mcloud.139.com/storageWeb/servlet/downloadServlet?code=S0ExNjExaXB0UlkxRUwyMDIxN3RxQV9vREQ5&amp;un=08BE6223C9F1895A92D13A0293E3E680CB4D8349B6BF4AC5D7AB8EDE4996C911&amp;dom=D961&amp;txType=0</a></p>
<blockquote>
<p><em><strong>百度云不限速下载功能</strong></em></p>
</blockquote>
<p>通过一个宝藏级网站,<a href="https://www.kelongwo.com/">克隆窝</a>,来实现</p>
<p>教程:</p>
<ol>
<li>下载并安装motrix(使用百度云不限速功能时需打开motrix)</li>
<li><strong>登录</strong>克隆窝,找到百度不限速功能</li>
</ol>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302011253451.png" alt="image-20230201125344137"></p>
<p>3.输入网盘链接以及提取码</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302011254493.png" alt="image-20230201125411401"></p>
<p>4.解析后点击下载,下载的解析链接会通讯到你已经打开的motrix上,进行下载</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302011255974.png" alt="image-20230201125542778"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302011256747.png" alt="image-20230201125602534"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302011256706.png" alt="image-20230201125621629"></p>
<p>当然这个方法只能不限速下载较少的文件,想批量下载的话可以去了解下<a href="https://www.kelongwo.com/antdownload2/">antidownload</a>这个软件</p>
]]></content>
      <categories>
        <category>科技分享</category>
      </categories>
      <tags>
        <tag>黑科技</tag>
      </tags>
  </entry>
  <entry>
    <title>数组</title>
    <url>/2017/05/26/%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="数组的概述"><a href="#数组的概述" class="headerlink" title="数组的概述"></a>数组的概述</h2><p><strong>数组是多个相同类型数据按一定顺序排列的集合,并使用一个名字命名,并通过编号的方式对这些数组进行统一管理</strong></p>
<h3 id="数组的常见概念"><a href="#数组的常见概念" class="headerlink" title="数组的常见概念"></a>数组的常见概念</h3><ul>
<li>数组名</li>
<li>下标和索引</li>
<li>元素</li>
<li>数组的长度</li>
</ul>
<p> <img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549491.png" alt="image-20221024195737285"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549640.png" alt="image-20221024195942730"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549415.png" alt="image-20221024200110712"></p>
<h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><h4 id="一维数组的6个事情"><a href="#一维数组的6个事情" class="headerlink" title="一维数组的6个事情"></a>一维数组的6个事情</h4><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549766.png" alt="image-20221024200318391"></p>
<h3 id="一维数组的声明和初始化"><a href="#一维数组的声明和初始化" class="headerlink" title="一维数组的声明和初始化"></a>一维数组的声明和初始化</h3><p>int num (初始化)</p>
<p>num = 0 (声明1)<img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549213.png" alt="image-20221024201554692"></p>
<p>引用数据类型需要加new</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549089.png" alt="image-20221025182712935"></p>
<p>数组一旦初始化完成,就无法改变长度了</p>
<h2 id="调用数组指定位置的元素-通过角标的方式调用"><a href="#调用数组指定位置的元素-通过角标的方式调用" class="headerlink" title="调用数组指定位置的元素:通过角标的方式调用"></a>调用数组指定位置的元素:通过角标的方式调用</h2><p>数组的角标是从0开始的,到长度-1结束</p>
<p>只要不是跟数据库交互的,都是从0开始</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549771.png" alt="image-20221025183924575"></p>
<h2 id="如何获取数组的长度"><a href="#如何获取数组的长度" class="headerlink" title="如何获取数组的长度"></a>如何获取数组的长度</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549230.png" alt="image-20221025184022419"></p>
<h2 id="如何遍历数组元素"><a href="#如何遍历数组元素" class="headerlink" title="如何遍历数组元素"></a>如何遍历数组元素</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550536.png" alt="image-20221025184134345"></p>
<h2 id="数组元素的默认初始化值"><a href="#数组元素的默认初始化值" class="headerlink" title="数组元素的默认初始化值"></a>数组元素的默认初始化值</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550632.png" alt="image-20221025184504536"></p>
<p>整型的默认值为0</p>
<p>浮点型的是0.0</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550819.png" alt="image-20221025184757056">char型\</p>
<p>不带引号的是assic码,带的是字符</p>
<p>布尔类型是false</p>
<h3 id="引用数据类型的初始化值"><a href="#引用数据类型的初始化值" class="headerlink" title="引用数据类型的初始化值"></a>引用数据类型的初始化值</h3><p>String是null(换句话说null只属于string?)并且这个null不用加引号</p>
<h2 id="内存解析的简单说明"><a href="#内存解析的简单说明" class="headerlink" title="内存解析的简单说明"></a>内存解析的简单说明</h2><p> <img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550290.png" alt="image-20221025191411768"></p>
<p>局部变量都放在栈当中</p>
<p>连续的数值(如数组)保存在堆当中</p>
<p>给数组赋值就是改变了格子内的内容</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550076.png" alt="image-20221026181439422"></p>
<h2 id="10-26号作业中产生的一些方法"><a href="#10-26号作业中产生的一些方法" class="headerlink" title="10.26号作业中产生的一些方法"></a>10.26号作业中产生的一些方法</h2><h3 id="双重嵌循环"><a href="#双重嵌循环" class="headerlink" title="双重嵌循环"></a>双重嵌循环</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550182.png" alt="image-20221026181639825"></p>
<h3 id="向数组中写入多个数据"><a href="#向数组中写入多个数据" class="headerlink" title="向数组中写入多个数据"></a>向数组中写入多个数据</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550384.png" alt="image-20221026181719267"></p>
<h3 id="比较数组内数据大小的方法"><a href="#比较数组内数据大小的方法" class="headerlink" title="比较数组内数据大小的方法"></a>比较数组内数据大小的方法</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550162.png" alt="image-20221026181844909"></p>
<h3 id="数组套数组"><a href="#数组套数组" class="headerlink" title="数组套数组"></a>数组套数组<img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550155.png" alt="image-20221026182017712"></h3><h2 id="多维数组的使用"><a href="#多维数组的使用" class="headerlink" title="多维数组的使用"></a>多维数组的使用</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550435.png" alt="image-20221026182941088"></p>
<h2 id="二位数组的初始化和声明"><a href="#二位数组的初始化和声明" class="headerlink" title="二位数组的初始化和声明"></a>二位数组的初始化和声明</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550742.png" alt="image-20221026184756118"></p>
<p>你可以将其理解为表格</p>
<p>如果是3维以上,你也可以这么理解</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550018.png" alt="image-20221027160207386"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550518.png" alt="image-20221027160312082"></p>
<p>一维的也能这样</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550029.png" alt="image-20221027160433476"></p>
<h2 id="二维数组的调用"><a href="#二维数组的调用" class="headerlink" title="二维数组的调用"></a>二维数组的调用</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550617.png" alt="image-20221027160652280"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550643.png" alt="image-20221027160915537"></p>
<h2 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度"></a>获取数组的长度</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551178.png" alt="image-20221027161404904"></p>
<h2 id="如何遍历二维数组"><a href="#如何遍历二维数组" class="headerlink" title="如何遍历二维数组"></a>如何遍历二维数组</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551829.png" alt="image-20221027161833244"></p>
<h2 id="二维数组的默认初始化值"><a href="#二维数组的默认初始化值" class="headerlink" title="二维数组的默认初始化值"></a>二维数组的默认初始化值</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551324.png" alt="image-20221030162532004"></p>
<p>第一个指向的是地址值,并且有几个中括号就说明是几维的数组</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551109.png" alt="image-20221030162957208"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551861.png" alt="image-20221030163002562"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551578.png" alt="image-20221030163030556"></p>
<p>应为后面啥也没有,所以为空(null)</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551171.png" alt="image-20221030163311033"></p>
<h3 id="二维数组的内存解析"><a href="#二维数组的内存解析" class="headerlink" title="二维数组的内存解析"></a>二维数组的内存解析</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551003.png" alt="image-20221030163722839"></p>
]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>数组的巩固练习</title>
    <url>/2017/05/26/%E6%95%B0%E7%BB%84%E7%9A%84%E5%B7%A9%E5%9B%BA%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551240.png" alt="image-20221030170258216"></p>
<p>这里的x是一维数组,y是二维数组,并且<img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551053.png" alt="image-20221030170447869">是给x和y分别赋值</p>
<h3 id="杨辉三角"><a href="#杨辉三角" class="headerlink" title="杨辉三角"></a>杨辉三角</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551519.png" alt="image-20221030170758474"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551485.png" alt="image-20221031104530699"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551702.png" alt="image-20221031104547297"></p>
<h2 id="数组的常见算法"><a href="#数组的常见算法" class="headerlink" title="数组的常见算法"></a>数组的常见算法</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552340.png" alt="image-20221031105743708"></p>
<p>随机数公式<img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552030.png" alt="image-20221102100629389"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552108.png" alt="image-20221109103525941"></p>
<p>数组的复制</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552508.png" alt="image-20221102102000513">数组的复制,循环和查找</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552831.png" alt="image-20221102102221947"></p>
<p>中间变量法,首尾交换法</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552441.png" alt="image-20221102102528555"></p>
<p>二分法查找算法</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552529.png" alt="image-20221102110340769"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552899.png" alt="image-20221102110402722"></p>
<h3 id="排序算法-冒泡排序"><a href="#排序算法-冒泡排序" class="headerlink" title="排序算法:冒泡排序"></a>排序算法:冒泡排序</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552809.png" alt="image-20221107201532147"></p>
<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552365.png" alt="image-20221107202127692"></p>
<p>Arrays工具类的使用</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552856.png" alt="image-20221109101026041"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552701.png" alt="image-20221109101111754"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552317.png" alt="image-20221109101305988"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552573.png" alt="image-20221109101415211"></p>
<p>(fill是将数组值全部修改为设定值)</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552938.png" alt="image-20221109101525045"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552456.png" alt="image-20221109101603129"></p>
<p>(这个只能查找已经排序的数组)</p>
<h3 id="数组编写的常见错误"><a href="#数组编写的常见错误" class="headerlink" title="数组编写的常见错误"></a>数组编写的常见错误</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552999.png" alt="image-20221109101852664"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553269.png" alt="image-20221109101921930"></p>
<p>(空指针异常)</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553652.png" alt="image-20221109102028987"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553838.png" alt="image-20221109102110239"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553301.png" alt="image-20221109102147626"></p>
]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>特殊关键词的使用(break与continue)</title>
    <url>/2017/05/26/%E7%89%B9%E6%AE%8A%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%BF%E7%94%A8break&amp;contine/</url>
    <content><![CDATA[<h2 id="特殊关键字的使用-break与continue"><a href="#特殊关键字的使用-break与continue" class="headerlink" title="特殊关键字的使用(break与continue)"></a>特殊关键字的使用(break与continue)</h2><p>  <img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555945.png" alt="image-20221022134051259"></p>
<p> 注意,这两个关键字如果后面不可以声明语句,会报错,所以只能用这两个语句结尾</p>
<p> 并且是默认跳出包裹此关键字最近的for循环</p>
<p> 但是可以用标签来指定</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555312.png" alt="image-20221022135007927"></p>
<p>return语句</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555465.png" alt="image-20221022135206533"></p>
]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>程序流程控制</title>
    <url>/2017/05/26/%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h2 id="程序流程控制的几大结构"><a href="#程序流程控制的几大结构" class="headerlink" title="程序流程控制的几大结构"></a>程序流程控制的几大结构</h2><ul>
<li><p>顺序结构</p>
</li>
<li><p>分支结构</p>
</li>
<li><p>循环结构</p>
<h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281539392.png" alt="image-20221014082333576"><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281540328.png" alt="image-20221014082344584"></p>
</li>
</ul>
<p>​    <img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543615.png" alt="image-20221014082414516"></p>
<h2 id="使用scaner从键盘获取数据"><a href="#使用scaner从键盘获取数据" class="headerlink" title="使用scaner从键盘获取数据"></a>使用scaner从键盘获取数据</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543217.png" alt="image-20221014083258172"></p>
<p>对于char型变量,scaner没有获取的方法</p>
<p>程序是顺序执行的,如三选一,如果第一个分支行被指令被执行,那么后面的就不会再执行了<img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543325.png" alt="image-20221014093819429"></p>
<h4 id="if-else-结构可以互相嵌套"><a href="#if-else-结构可以互相嵌套" class="headerlink" title="if else 结构可以互相嵌套"></a>if else 结构可以互相嵌套</h4><p>但是层数最好不要超过3层</p>
<p>一是应为你自己绕不过来</p>
<p>二是 因为可读性太差</p>
<p>if语句如果只有一行那么大括号可以省略,但是最好不要这样做,因为这样经常会出错(比如回头检查时要补一行,就很麻烦)</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543956.png" alt="image-20221016200321392"></p>
<p>这种情况下else是就近原则</p>
]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象-java类以及类的成员</title>
    <url>/2017/05/26/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-java%E7%B1%BB%E5%8F%8A%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98/</url>
    <content><![CDATA[<h3 id="java类以及类的成员-属性-方法-构造器-代码块-内部类"><a href="#java类以及类的成员-属性-方法-构造器-代码块-内部类" class="headerlink" title="java类以及类的成员:属性,方法,构造器;代码块,内部类"></a>java类以及类的成员:属性,方法,构造器;代码块,内部类</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544484.png" alt="image-20221110162529295"></p>
<h2 id="面向过程与面向对象"><a href="#面向过程与面向对象" class="headerlink" title="面向过程与面向对象"></a>面向过程与面向对象</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544177.png" alt="image-20221110164953202"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544854.png" alt="image-20221110165951763"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544863.png" alt="image-20221110170031878"></p>
<h3 id="java语言的基本元素-类与对象"><a href="#java语言的基本元素-类与对象" class="headerlink" title="java语言的基本元素:类与对象"></a>java语言的基本元素:类与对象</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545183.png" alt="image-20221110170335418"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545291.png" alt="image-20221110170559944"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545069.png" alt="image-20221110170706319"></p>
<h3 id="类的结构-属性与方法"><a href="#类的结构-属性与方法" class="headerlink" title="类的结构:属性与方法"></a>类的结构:属性与方法</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545680.png" alt="image-20221110171238179"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545651.png" alt="image-20221113151740802"> </p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545813.png" alt="image-20221113151947760"></p>
<h2 id="创建类的对象"><a href="#创建类的对象" class="headerlink" title="创建类的对象"></a>创建类的对象</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545767.png" alt="image-20221113152239822"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">person</span>;</span><br><span class="line"><span class="comment">//创建类的对象=类的实例化=实例化类</span></span><br><span class="line"><span class="comment">//调用对象的结构:属性,方法</span></span><br><span class="line"><span class="comment">//调用属性:&quot;对象.属性&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545640.png" alt="image-20221113152826043"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545636.png" alt="image-20221113153114797"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p1成为了类的实例,并且属性就是成员变量</span><br></pre></td></tr></table></figure>

<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546891.png" alt="image-20221113160220957"></p>
<h4 id="如果创建了一个类的多个对象-那么每个对象都独立的拥有一套类的属性"><a href="#如果创建了一个类的多个对象-那么每个对象都独立的拥有一套类的属性" class="headerlink" title="如果创建了一个类的多个对象,那么每个对象都独立的拥有一套类的属性"></a>如果创建了一个类的多个对象,那么每个对象都独立的拥有一套类的属性</h4><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546429.png" alt="image-20221113161151863"></p>
<p>地址值是相同的,至于为什么 p3=p1,大概是因为类型是相同的所以省略了后缀吧</p>
<h2 id="对象的内存解析"><a href="#对象的内存解析" class="headerlink" title="对象的内存解析"></a>对象的内存解析</h2><p> <img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546055.png" alt="image-20221113161354349"></p>
<p>这是对象的具体内存结构</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546399.png" alt="image-20221113161824120"></p>
<h2 id="属性与局部变量的对比"><a href="#属性与局部变量的对比" class="headerlink" title="属性与局部变量的对比"></a>属性与局部变量的对比</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546783.png" alt="image-20221113164125220"></p>
<p>属性可以声明权限</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546408.png" alt="image-20221113164142504"></p>
<p>其实就是变量一类的东西放的位置不同,他的功能也就不同,</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546928.png" alt="image-20221113164403247"></p>
<p>局部变量在调用时都必须赋值</p>
<p>形参在调用时赋值即可</p>
<h3 id="局部变量与属性加载的位置不同"><a href="#局部变量与属性加载的位置不同" class="headerlink" title="局部变量与属性加载的位置不同"></a>局部变量与属性加载的位置不同</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546212.png" alt="image-20221113193414879"></p>
<h2 id="方法举例与格式的说明"><a href="#方法举例与格式的说明" class="headerlink" title="方法举例与格式的说明"></a>方法举例与格式的说明</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546559.png" alt="image-20221115163831432"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void表示没有返回值</span><br><span class="line">有string的表示返回值为string</span><br><span class="line">()内写的是形参</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> <img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546229.png" alt="image-20221115164258700"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546343.png" alt="image-20221115164343471"></p>
<h3 id="方法的声明"><a href="#方法的声明" class="headerlink" title="方法的声明"></a>方法的声明</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">权限修饰符 返回值类型 方法名(形参列表)&#123;方法体&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546716.png" alt="image-20221115164555548"></p>
<h4 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private.public,缺省,protected--封装性再细说,默认都先使用public</span><br></pre></td></tr></table></figure>

<h4 id="返回值类型"><a href="#返回值类型" class="headerlink" title="返回值类型"></a>返回值类型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果有返回值,必须在方法声明时,指定返回值的类型.同时方法中需要使用return来返回指定类型的变量或者常量</span><br></pre></td></tr></table></figure>

<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546529.png" alt="image-20221115165041333"></p>
<p>第一个时变量,第二个是常量</p>
<p>每一个可以输出的地方或者结果的地方都需要返回值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果方法没有返回值,则在方法声明时,使用void来表示,通常情况下不用return,但是可以使用return;来结束此方法</span><br><span class="line">return后不可以声明表达式</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h3 id="小结1"><a href="#小结1" class="headerlink" title="小结1"></a>小结1</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546640.png" alt="image-20221115165652260"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546009.png" alt="image-20221115165702139"></p>
<h3 id="方法名"><a href="#方法名" class="headerlink" title="方法名"></a>方法名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方法名属于标识符,要使用规范,遵循所见即所得原则</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="形参列表"><a href="#形参列表" class="headerlink" title="形参列表"></a>形参列表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可以声明一个或多个形参</span><br><span class="line">格式 :数据类型 形参,数据类型 形参.....</span><br><span class="line">只声明不赋值</span><br></pre></td></tr></table></figure>

<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547054.png" alt="image-20221116101717887"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547407.png" alt="image-20221116101841712"></p>
<h3 id="一些注意点"><a href="#一些注意点" class="headerlink" title="一些注意点"></a>一些注意点</h3><p>类内部的方法可以调用类的属性</p>
<p>方法内部可以调用方法</p>
<p>递归就是方法自己调用自己</p>
<p>方法中不能定义方法</p>
<h3 id="传输接受与返回"><a href="#传输接受与返回" class="headerlink" title="传输接受与返回"></a>传输接受与返回</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547610.png" alt="image-20221117101910110"></p>
<p>多理解理解</p>
<p>当然如果没有返回那直接写个sout也可以</p>
<h4 id="传参数的问题"><a href="#传参数的问题" class="headerlink" title="传参数的问题"></a>传参数的问题</h4><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547934.png" alt="image-20221117102137790"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547451.png" alt="image-20221117102144642"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">如果方法会调用类的属性,那么修改类,也可以更改参数</span><br><span class="line"></span><br><span class="line">如果用形参,传入数据,也是修改参数的一种方法</span><br><span class="line"></span><br><span class="line">但是这两种方法一旦弄混了,那就会出现各种奇怪的bug</span><br></pre></td></tr></table></figure>

<h3 id="对象与static的错误"><a href="#对象与static的错误" class="headerlink" title="对象与static的错误"></a>对象与static的错误</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547872.png" alt="image-20221117102529665"></p>
<p>如果你建方法时不用static,那么就必须造一个对象去调用,否则会出错,这里涉及到的点之后回去详细说明</p>
<h3 id="关于方法声明的一些练习"><a href="#关于方法声明的一些练习" class="headerlink" title="关于方法声明的一些练习"></a>关于方法声明的一些练习</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547085.png" alt="image-20221117145702406"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547737.png" alt="image-20221117145749766"></p>
<p>如果直接调用method方法,那么就必须把static给补上</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547102.png" alt="image-20221117150418016"></p>
<p>先强化造对象的过程再说别的</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547778.png" alt="image-20221117150645874"></p>
<p>虽然说里边是个方法,但是实际上返回值是变量,也就是最终结果是变量,所以可以放</p>
<h3 id="属性与形参"><a href="#属性与形参" class="headerlink" title="属性与形参"></a>属性与形参</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547084.png" alt="image-20221117152023865"></p>
<p>这个代码已经说明的很清楚了</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547621.png" alt="image-20221117152148621"></p>
<p>形参的调用</p>
<h3 id="重点好题⭐"><a href="#重点好题⭐" class="headerlink" title="重点好题⭐"></a>重点好题⭐</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547603.png" alt="image-20221117152920791"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547877.png" alt="image-20221117153215395"></p>
<p><strong>也就是说,数组里面啥都能装,可以装数字型,也能把对象给装进去.</strong></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547890.png" alt="image-20221117154558648"></p>
<p>换句话说这个数组的类是student类,的</p>
<p>具体原理参见柞与堆</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547105.png" alt="image-20221117153528207"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547563.png" alt="image-20221117153642066"></p>
<p>还可以利用类里面的方法进行编辑</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547499.png" alt="image-20221117154213954"></p>
<p>数组之间的使用必须是同类型的.</p>
]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>算数运算符的使用</title>
    <url>/2017/05/26/%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553513.png" alt="image-20221012101401291"></p>
<h3 id="符号运算的注意点"><a href="#符号运算的注意点" class="headerlink" title="符号运算的注意点"></a>符号运算的注意点</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553366.png" alt="image-20221012102808342"></p>
<p>所以说提升运算与强制转换运算十分重要</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553100.png" alt="image-20221012103238704">最终被模数的符号和去出来的余是一样的</p>
<p>开发中经常用%来判断能否被整除<img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554441.png" alt="image-20221012103738982"><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554172.png" alt="image-20221012104035454"></p>
<p>自增是在表明的变量上加1</p>
<p>前自增先自增后赋值</p>
<p>后自增先赋值后自增</p>
<p>自增一不会改变自身变量的类型</p>
<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554391.png" alt="image-20221012111406124"><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554595.png" alt="image-20221012111541561"><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221012111653469.png" alt="image-20221012111653469"></p>
<p>注意,这里的等号是赋值,+=可以理解为赋值＋2</p>
<p>一样的还有-=   %=</p>
<p>这种写法不会改变变量本身的数据类型</p>
<p>用定义的话会自动提升</p>
<p>比如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">short s = <span class="number">10</span></span><br><span class="line">short a = s+<span class="number">1</span></span><br><span class="line"><span class="comment">//因为1是整形</span></span><br><span class="line"><span class="comment">//所以a会变成int值从而导致出错</span></span><br><span class="line">如果用++就没问题</span><br></pre></td></tr></table></figure>

<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554917.png" alt="image-20221012134612382"></p>
<p>注意,输出的结果都是布尔类型</p>
<p>注意=与==号的区别</p>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554936.png" alt="image-20221012140310668"></p>
<h4 id="逻辑和短路的区别"><a href="#逻辑和短路的区别" class="headerlink" title="逻辑和短路的区别"></a>逻辑和短路的区别</h4><p>逻辑前后都会执行,而短路如果前面的条件已经判定不会执行了,那么后面的程序也不会执行了</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554730.png" alt="image-20221012192114465"></p>
<p> <img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554716.png" alt="image-20221012192236261"></p>
<pre><code>## 位运算符
</code></pre>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554250.png" alt="image-20221012193101596"></p>
<p> <img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554602.png" alt="image-20221012193045786"></p>
<h4 id="这个用的比较少-为了加速学习这里不做详细说明-详情参考-day03-15"><a href="#这个用的比较少-为了加速学习这里不做详细说明-详情参考-day03-15" class="headerlink" title="这个用的比较少,为了加速学习这里不做详细说明,详情参考 day03  15"></a>这个用的比较少,为了加速学习这里不做详细说明,详情参考 day03  15</h4><h3 id="交换两个变量的值"><a href="#交换两个变量的值" class="headerlink" title="交换两个变量的值"></a>交换两个变量的值</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554934.png" alt="image-20221012193955300"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554429.png" alt="image-20221012194006274"></p>
<h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554853.png" alt="image-20221012194255682"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554226.png" alt="image-20221014075825076"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555850.png" alt="image-20221014075949565"></p>
<p>不相同的类型可以统一为一个结果 ,表达式1和表达式2必须是一致的<img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555129.png" alt="image-20221014080441296"></p>
<p>凡是可以使用三元运算符的地方都可以使用if,else结构</p>
<p>如果两种结构都可以使用,那么优先选择三元运算符,因为他简洁又高效</p>
<h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555129.png" alt="image-20221014081357625"></p>
<p>看似复杂,实际使用中只要用好小括号就行</p>
]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象</title>
    <url>/2017/05/26/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A12/</url>
    <content><![CDATA[<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548133.png" alt="image-20221117170836337"></p>
<h2 id="万事万物皆对象"><a href="#万事万物皆对象" class="headerlink" title="万事万物皆对象"></a>万事万物皆对象</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548905.png" alt="image-20221117171914481"></p>
<h2 id="对象数组的内存结构"><a href="#对象数组的内存结构" class="headerlink" title="对象数组的内存结构"></a>对象数组的内存结构</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548264.png" alt="image-20221117173103843"></p>
<h2 id="匿名对象的使用"><a href="#匿名对象的使用" class="headerlink" title="匿名对象的使用"></a>匿名对象的使用</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548416.png" alt="image-20221117184719227"></p>
<p>直接这样打印打印出来的是地址值</p>
<p>  <img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548902.png" alt="image-20221117184937277"></p>
<p>1.这样写首先是调用对象的属性或方法</p>
<p>2.这是匿名对象的创建与调用,正常的是这样的<img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548411.png" alt="image-20221117185158657"></p>
<p>这new出来的对象是两个不同的对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">匿名对象只能调用一次,也就是一次性的</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548544.png" alt="image-20221117185843410"></p>
<h3 id="自定义数组的工具类"><a href="#自定义数组的工具类" class="headerlink" title="自定义数组的工具类"></a>自定义数组的工具类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给类命名的时候不要跟类库里的类重名</span><br></pre></td></tr></table></figure>

<h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>同一个类中,允许存在一个以上的同名方法,只要他们的参数个数或者参数类型不同即可</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548006.png" alt="image-20221130101446152"></p>
<p>如彼此名虽同,但是具体不同,这些这些便是方法的重载</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548152.png" alt="image-20221130104020210"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548800.png" alt="image-20221130104211527"></p>
<p>他和自动类型转换也有关</p>
<h2 id="可变个数的形参"><a href="#可变个数的形参" class="headerlink" title="可变个数的形参"></a>可变个数的形参</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548834.png" alt="image-20221130104412847"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548600.png" alt="image-20221202080801825"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549472.png" alt="image-20221202081350342"></p>
<p>此情况下优先考虑常规单个</p>
<p>可变参数参数个数也可以是0个</p>
<p>编译器会认为这两个参数是相同的</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549755.png" alt="image-20221202081635222"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549148.png" alt="image-20221202081843677"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549937.png" alt="image-20221202081851151"></p>
<p>实际上这就是一个数组,只不过写法简化了</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549422.png" alt="image-20221202081926884"></p>
<p>若是想直接传入数组也行</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549277.png" alt="image-20221202082209252"></p>
<p>可变形参必须声明在最后一个</p>
<h2 id="方法参数的值传递机制"><a href="#方法参数的值传递机制" class="headerlink" title="方法参数的值传递机制"></a>方法参数的值传递机制</h2><ul>
<li>变量的赋值</li>
</ul>
<p>基本类型变量不存在这些问题</p>
<p>引用数据类型赋值指向同一个堆</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549367.png" alt="image-20221202090314274"></p>
<ul>
<li>基本数据类型的值传递</li>
</ul>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549602.png" alt="image-20221202092456844"></p>
]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>关键字与保留字</title>
    <url>/2016/05/26/%E5%85%B3%E9%94%AE%E5%AD%97%E4%B8%8E%E4%BF%9D%E7%95%99%E5%AD%97/</url>
    <content><![CDATA[<h2 id="关键字与保留字"><a href="#关键字与保留字" class="headerlink" title="关键字与保留字"></a>关键字与保留字</h2><p>定义：被Java语言赋予特殊含义，用作专门用途的字符串（单词）</p>
<p>特点：关键字中所有字幕都为小写</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302041633236.png" alt="image-20230204163315062"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302041634382.png" alt="image-20230204163406278"></p>
<p>灰色不算关键字但是能当关键字</p>
<p>保留字：未来可能用，使用时要避开</p>
]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>标识符与命名规范</title>
    <url>/2016/05/26/%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>变量的概念：申请内存中的一个区域</strong></p>
<p>​           该区域的数据可以在同一类型范围内不断变化</p>
<p>​           变量是最基本的储存类型，包含变量名，变量类型和储存的值</p>
<p><strong>变量用于在内存中保存数据</strong>  </p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302041645262.png" alt="image-20230204164500193"></p>
<p><strong>变量类型：整形，字符型浮点型</strong></p>
<p>定义变量的格式 数据类型 变量名 = 变量值</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302041645091.png" alt="image-20230204164521034"></p>
<p>程序的读取顺序从上到下，先print后定义变量就不行</p>
<p>一个大括号就是一个作用域，出了作用域之后变量不生效</p>
<p><strong>同一个作用域内，不可以声明同名的两个变量</strong></p>
<p>逆向思维，反证法，你不知道这个东西行不行，你就假设他行，然后去试试看(好低级的话)</p>
]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>标识符与命名规范</title>
    <url>/2016/05/26/%E5%8F%98%E9%87%8F%E7%9A%84%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302041651934.png" alt="image-20230204165140864"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302041651397.png" alt="image-20230204165146327"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302041653542.png" alt="image-20230204165337404"></p>
<p>float的范围比long还大，并且定义的数值后面要加F或f</p>
<p>定义char（字符型）变量通常使用单引号</p>
<p>char只能使用一个字符（等于两个字节）</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302041654943.png" alt="image-20230204165401862"></p>
<p>boolean变量 变量值只能取true或false,默认是false</p>
<p>常常在条件判断与循环中使用</p>
<p>tips:\n前面加.变为\n.就不再表示了,\的作用相当于转义.,\后的特殊符号不在表达含义</p>
<p><strong>String</strong></p>
<p>string不属于基本数据类型,他是引用数据类型</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302041654630.png" alt="image-20230204165431567"></p>
]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java学习流程概览</title>
    <url>/2016/05/26/java%E5%AD%A6%E4%B9%A0%E6%B5%81%E7%A8%8B%E6%A6%82%E8%A7%88/</url>
    <content><![CDATA[<h2 id="java学习流程概览"><a href="#java学习流程概览" class="headerlink" title="java学习流程概览"></a>java学习流程概览</h2><p>\n换行符，加在字符串内</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302041638828.png" alt="image-20230204163843654"></p>
]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>标识符与命名规范</title>
    <url>/2016/05/26/%E5%8F%98%E9%87%8F%E8%BF%90%E7%AE%97%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<h2 id="变量运算规则"><a href="#变量运算规则" class="headerlink" title="变量运算规则"></a>变量运算规则</h2><p>long l = 1323,此时没有后加L,但是仍然可以编译,是因为实际上把1323int型赋给了long型</p>
<p>如果后面的值超过了int的值,就会出问题<img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302041647873.png" alt="image-20230204164707790"></p>
]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>标识符与命名规范</title>
    <url>/2016/05/26/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BF%90%E7%AE%97%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<h2 id="基本数据类型之间的运算规则"><a href="#基本数据类型之间的运算规则" class="headerlink" title="基本数据类型之间的运算规则"></a>基本数据类型之间的运算规则</h2><p>1.自动类型提升<img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302041655758.png" alt="image-20230204165521721"></p>
<p>定义的结果变量的范围要大过数值否则就会丢失</p>
<p>整型和浮点型也可以,只要数值在范围内即可</p>
<p>低级往高级做运算应该往高级上去靠,并且整形的范围比浮点型的小 </p>
<p>所以结论</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302041655706.png" alt="image-20230204165529655"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302041655612.png" alt="image-20230204165533567"></p>
<p>char变量和容量小的变量做运算则比较特殊</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302041655841.png" alt="image-20230204165541775"></p>
<p>强制类型转换运算,是自动类型提升的逆运算</p>
<p>在被重定义的数值前加()强转符</p>
<p>损失的小数点称为截断操作</p>
<p><img src="C:/Users/19086/AppData/Roaming/Typora/typora-user-images/image-20230204165556547.png" alt="image-20230204165556547"></p>
]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>标识符与命名规范</title>
    <url>/2016/05/26/%E5%B8%B8%E7%94%A8%E7%9A%84dos%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="常用的dos命令"><a href="#常用的dos命令" class="headerlink" title="常用的dos命令"></a>常用的dos命令</h2><p>dir： 列出当前目录下的文件以及文件夹</p>
<p>md：创建目录</p>
<p>rd：删除目录</p>
<p>cd：进入指定目录</p>
<p>cd..:退回到上一级目录</p>
<p>cd:退回到根目录</p>
<p>del：删除文件</p>
<p>exit：推出dos命令</p>
<p> 补充：echo javase&gt;1.doc     echo 内容&gt;（&gt;代表到）文件名.doc</p>
<p>批量删除同类型文件文件名用*号，如del *.doc</p>
<p>del选择文件夹删除的是文件夹中的文件</p>
<p>左右键移动光标</p>
<p>上下键</p>
]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>标识符与命名规范</title>
    <url>/2016/05/26/%E6%A0%87%E8%AF%86%E7%AC%A6%E4%B8%8E%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83--%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>可以起名字的地方都叫标识符</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302041641794.png" alt="image-20230204164138728"></p>
<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302041642126.png" alt="image-20230204164209044"></p>
<p>java设置名字要见名知意，不要自己搞自己</p>
]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java学习流程概览</title>
    <url>/2016/05/26/%E6%B3%A8%E9%87%8A/</url>
    <content><![CDATA[<h2 id="注释的规范"><a href="#注释的规范" class="headerlink" title="注释的规范"></a>注释的规范</h2><p>//单行注释：如下的语句表示输出到控制台xxxxxxxxxxxx</p>
<p>//后的内容读代码不会读</p>
<p>多行注释</p>
<p>/*多行注释：xxxxxxxxxxxxxx</p>
<p>xxxxxxxxx*/</p>
<p>注释用来解释说明代码，方便你自己，以免你自己不懂</p>
<p>注释可能出错的代码，然后运行，发现不报错那就是注释的地方错了，方便你排查</p>
<p>生成的字节码文件不包含注释的信息</p>
<p>文档注释/** */</p>
<p>启用方法</p>
<p>javadoc -d 创立的文件名 -author -version xxx.java(你所写的类） 编译出来的html只能够提取文档注释，文档注释中</p>
<p>@author xxxxxx</p>
<p>@version xxxxxxx</p>
<p>注意：多行注释不可以嵌套使用</p>
]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo创建文件自动打开</title>
    <url>/2023/02/04/hexo%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80/</url>
    <content><![CDATA[<h2 id="如何在hexo创建新post文档之后自动打开"><a href="#如何在hexo创建新post文档之后自动打开" class="headerlink" title="如何在hexo创建新post文档之后自动打开"></a>如何在hexo创建新post文档之后自动打开</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;The title of your blog&quot;</span><br></pre></td></tr></table></figure>

<p>这个指令可以快速创建</p>
<h3 id="实现创建后自动打开"><a href="#实现创建后自动打开" class="headerlink" title="实现创建后自动打开"></a>实现创建后自动打开</h3><ol>
<li><p>新建<code>scripts</code>目录（hexo根目录）</p>
</li>
<li><p>创建<code>auto_open.js</code>文件,如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">var spawn = require(&#x27;child_process&#x27;).exec;</span><br><span class="line">hexo.on(&#x27;new&#x27;, function(data)&#123;</span><br><span class="line">  spawn(&#x27;start  &quot;C:\Program Files\Typora\Typora.exe&quot; &#x27; + data.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ol>
<p>路径设置为你的软件路径即可</p>
]]></content>
      <categories>
        <category>科技分享给</category>
      </categories>
      <tags>
        <tag>黑科技</tag>
      </tags>
  </entry>
  <entry>
    <title>js编程练习之变化的背景</title>
    <url>/2023/02/04/js%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0%E4%B9%8B%E5%8F%98%E5%8C%96%E7%9A%84%E8%83%8C%E6%99%AF/</url>
    <content><![CDATA[<img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302042100009.png" alt="image-20230204210016349" style="zoom: 33%;" />

]]></content>
      <categories>
        <category>js基础</category>
        <category>js练习</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机导论大一上复习计划大纲</title>
    <url>/2023/02/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AF%BC%E8%AE%BA%E5%A4%A7%E4%B8%80%E4%B8%8A%E5%A4%8D%E4%B9%A0%E8%AE%A1%E5%88%92%E5%A4%A7%E7%BA%B2/</url>
    <content><![CDATA[<h2 id="第一章-认识计算机"><a href="#第一章-认识计算机" class="headerlink" title="第一章-认识计算机"></a>第一章-认识计算机</h2><h4 id="O-计算、计算机、计算思维的定义和区别"><a href="#O-计算、计算机、计算思维的定义和区别" class="headerlink" title="Ø 计算、计算机、计算思维的定义和区别"></a>Ø 计算、计算机、计算思维的定义和区别</h4><p><strong>计算</strong></p>
<p>计算是一种将[单一或多个的输入值]转换为[单一或多个结果]的思考过程</p>
<p><strong>自动计算要解决的几个问题:表示-存储-执行</strong></p>
<p>“数据”的表示</p>
<p>“计算规则”的表示:程序</p>
<p>数据与计算规则的“自动存储”计算规则的“自动执行”</p>
<p><strong>计算思维要素</strong></p>
<p><strong>分解</strong>:把数据,过程或问题分解为更小的,更易于管理的部分</p>
<p><strong>模式识别</strong>:观察数据的模式、趋势和规律。</p>
<p><strong>抽象</strong>:识别模式形成背后的一般原理。</p>
<p><strong>算法设计</strong>:为解决某一类问题撰写一系列详细步骤。</p>
<h4 id="O-第一部通用电子计算机、第一个微处理器"><a href="#O-第一部通用电子计算机、第一个微处理器" class="headerlink" title="Ø 第一部通用电子计算机、第一个微处理器"></a>Ø 第一部通用电子计算机、第一个微处理器</h4><p>第一部通用电子计算机:<em><strong>ENIAC</strong></em></p>
<p>第一个微处理器:<strong>INTEL4004</strong></p>
<h4 id="计算机的发展（计算机发展的四个阶段）"><a href="#计算机的发展（计算机发展的四个阶段）" class="headerlink" title="计算机的发展（计算机发展的四个阶段）"></a>计算机的发展（计算机发展的四个阶段）</h4><ul>
<li>第一代计算机（1946-1957年）–电子管时代</li>
<li>第二代计算机（1958-1964年）–晶体管时代</li>
<li>第三代计算机（1965-1971年）–中小规模集成电路时代</li>
<li>第四代计算机（1972年至今）–超大规模集成电路时代。</li>
</ul>
<hr>
<h2 id="第二章：进制表示与信息编码"><a href="#第二章：进制表示与信息编码" class="headerlink" title="第二章：进制表示与信息编码"></a>第二章：进制表示与信息编码</h2><h4 id="进制的转换"><a href="#进制的转换" class="headerlink" title="进制的转换"></a>进制的转换</h4><p><strong>参考文章</strong>:<a href="/2023/02/05/%E8%BF%9B%E5%88%B6%E7%9A%84%E8%BD%AC%E6%8D%A2/" title="进制的转换">进制的转换</a></p>
<h4 id="O-原码、反码、补码的计算"><a href="#O-原码、反码、补码的计算" class="headerlink" title="Ø 原码、反码、补码的计算"></a>Ø 原码、反码、补码的计算</h4><p><strong>参考文章</strong>:<a href="/2023/02/05/%E5%82%A8%E5%AD%98%E8%AE%A1%E9%87%8F%E5%8D%95%E4%BD%8D%E4%B8%8E%E6%95%B0%E5%AD%97%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F/" title="储存计量单位与数字存储方式">储存计量单位与数字存储方式</a></p>
<h4 id="O-浮点数SeM的表示"><a href="#O-浮点数SeM的表示" class="headerlink" title="Ø 浮点数SeM的表示"></a>Ø 浮点数SeM的表示</h4><p>这个东西各种原因这里不做说明,详情请看第二章第69页的ppt,不过不建议看</p>
<h4 id="O-ASCII码、国标码、Unicode码的定义"><a href="#O-ASCII码、国标码、Unicode码的定义" class="headerlink" title="Ø ASCII码、国标码、Unicode码的定义"></a>Ø ASCII码、国标码、Unicode码的定义</h4><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051936546.png" alt="image-20230205193615446" style="zoom:25%;" /><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051937493.png" alt="image-20230205193740403" style="zoom:25%;" /></p>
<p><strong>国标码</strong>:注意,一个汉字由两个字节表示(一个字节8个bit)</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051940616.png" alt="image-20230205194041565"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051940884.png" alt="image-20230205194056832"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051941305.png" alt="image-20230205194112260"></p>
<p><strong>unicode</strong>:<strong>Unicode为世界上所有字符都分配了一个唯一的数字编号</strong>，这个编号范围从 0x000000 到 0x10FFFF</p>
<h2 id="第三章-逻辑学"><a href="#第三章-逻辑学" class="headerlink" title="第三章-逻辑学"></a>第三章-逻辑学</h2><h4 id="O-与或非运算"><a href="#O-与或非运算" class="headerlink" title="Ø 与或非运算"></a>Ø 与或非运算</h4><h4 id="O-布尔代数计算、真值表；"><a href="#O-布尔代数计算、真值表；" class="headerlink" title="Ø 布尔代数计算、真值表；"></a>Ø 布尔代数计算、真值表；</h4><p>参考文章:<a href="/2023/02/05/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/" title="逻辑运算">逻辑运算</a></p>
<h4 id="二极管与三极管特性"><a href="#二极管与三极管特性" class="headerlink" title="二极管与三极管特性:"></a>二极管与三极管特性:</h4><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302052030591.png" alt="image-20230205203010512" style="zoom:25%;" /><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302052030315.png" alt="image-20230205203059223" style="zoom:25%;" /></p>
<h2 id="第四章：图灵机和冯诺依曼结构"><a href="#第四章：图灵机和冯诺依曼结构" class="headerlink" title="第四章：图灵机和冯诺依曼结构"></a>第四章：图灵机和冯诺依曼结构</h2><p>参考文章:<a href="/2023/02/05/%E5%9B%BE%E7%81%B5%E6%9C%BA%E4%B8%8E%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E7%BB%93%E6%9E%84/" title="图灵机与冯诺依曼结构">图灵机与冯诺依曼结构</a></p>
<p> <strong>图灵机组成的三部分：1、带子</strong>，被分成许多方格，符号可以被写入其中或从中读出；<strong>2、可以移动的读写头</strong>，能从带子上读取符号或将符号写到带子上；<strong>3、指示读写头下一步如何做的一组规则。</strong></p>
<p><strong>图灵机的运算(见上文的参考文章)</strong></p>
<p><strong>冯诺依曼计算机的五大组成部分:</strong><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302052051983.png" alt="image-20230205205159856" style="zoom: 50%;" /></p>
<p>2-4译码器00,01,10,11分别对应着从上往下的四条电线</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302060907448.png" alt="image-20230206090735329" style="zoom: 25%;" /><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302060908436.png" alt="image-20230206090805316" style="zoom: 25%;" /></p>
<img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302060909489.png" alt="image-20230206090914366" style="zoom:50%;" />

<h4 id="Ram和rom的定义以及特点"><a href="#Ram和rom的定义以及特点" class="headerlink" title="Ram和rom的定义以及特点"></a>Ram和rom的定义以及特点</h4><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302060912062.png" alt="image-20230206091227011" style="zoom: 50%;" />

<img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302060912460.png" alt="image-20230206091237410" style="zoom:50%;" />

<h2 id="第五-六章-算法建模与算法基础"><a href="#第五-六章-算法建模与算法基础" class="headerlink" title="第五,六章-算法建模与算法基础"></a>第五,六章-算法建模与算法基础</h2><p>参考文章:</p>
<a href="/2023/02/05/%E8%AE%A1%E7%AE%97%E6%80%9D%E7%BB%B4-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/" title="计算思维-算法基础">计算思维-算法基础</a>

<a href="/2023/02/05/%E5%9B%BE%E7%81%B5%E6%9C%BA%E4%B8%8E%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E7%BB%93%E6%9E%84/" title="图灵机与冯诺依曼结构">图灵机与冯诺依曼结构</a>
]]></content>
      <categories>
        <category>必修课</category>
        <category>计算机导论</category>
      </categories>
      <tags>
        <tag>-计算机导论</tag>
      </tags>
  </entry>
  <entry>
    <title>进制的转换</title>
    <url>/2023/02/05/%E8%BF%9B%E5%88%B6%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="进制的转换"><a href="#进制的转换" class="headerlink" title="进制的转换"></a>进制的转换</h2><h3 id="各种进制转10"><a href="#各种进制转10" class="headerlink" title="各种进制转10"></a>各种进制转10</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051303051.png" alt="image-20221009191357718"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051303052.png" alt="image-20221009191440495"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051303053.png" alt="image-20221009191521203"></p>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>个位上是0,然后向左递增或向右递减</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051303054.png" alt="image-20221009191944636"></p>
<p><strong>以个位为0,为中心轴,向左侧递增,向右侧递减</strong></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051303056.png" alt="image-20221009192318681"></p>
<p>其他进制的转10进制以此类推</p>
<h2 id="10进制转换为其他进制"><a href="#10进制转换为其他进制" class="headerlink" title="10进制转换为其他进制"></a>10进制转换为其他进制</h2><p><strong>整数部分为除,小数部分为乘,读取方向为数轴方向,整数↑,小数↓</strong></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051303057.png" alt="image-20221009192502724"></p>
<p>从下往上读取.</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051303058.png" alt="image-20221009192639409"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051303059.png" alt="image-20221009193112096"></p>
<p>只要记住是反过来的就行</p>
<h3 id="快速方法-高进制转2"><a href="#快速方法-高进制转2" class="headerlink" title="快速方法(高进制转2)"></a>快速方法(高进制转2)</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051303060.png" alt="image-20221009193250110"></p>
<p>一变几就看是2的几次方,并且如果是首位或者末尾是0的话就省略掉</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051303062.png" alt="image-20221009193536174"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051303063.png" alt="image-20221009193709308"></p>
<h3 id="二进制转高的话就从小数点位置开始划分"><a href="#二进制转高的话就从小数点位置开始划分" class="headerlink" title="二进制转高的话就从小数点位置开始划分"></a>二进制转高的话就从小数点位置开始划分</h3><p>每一个被划分出来的单元都是独立的</p>
<p>如果是16转8的话就用2来做媒介,很快</p>
<h4 id="并且将划分出来的数组用二进制转换法转换成数字"><a href="#并且将划分出来的数组用二进制转换法转换成数字" class="headerlink" title="并且将划分出来的数组用二进制转换法转换成数字"></a>并且将划分出来的数组用二进制转换法转换成数字</h4><p> H下标表示16进制</p>
<p>B是二进制 O是八进制</p>
<p>D是10进制</p>
]]></content>
      <categories>
        <category>必修课</category>
        <category>计算机导论</category>
      </categories>
      <tags>
        <tag>-计算机导论</tag>
      </tags>
  </entry>
  <entry>
    <title>储存计量单位与数字存储方式</title>
    <url>/2023/02/05/%E5%82%A8%E5%AD%98%E8%AE%A1%E9%87%8F%E5%8D%95%E4%BD%8D%E4%B8%8E%E6%95%B0%E5%AD%97%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051914419.png" alt="image-20221011135058964"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051914421.png" alt="image-20221011135348635"></p>
<p>一个字节8位</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051914422.png" alt="image-20221011145133435"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051914423.png" alt="image-20221011145148312"><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051914424.png" alt="image-20221011145326002"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051914425.png" alt="image-20221011145440945">![image-20221011145442802](C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221011145442802.png</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051914426.png" alt="image-20221011145804543"><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051914427.png" alt="image-20221011150007809"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051914428.png" alt="image-20221011150506260"><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051914429.png" alt="image-20221011150513085"></p>
<h3 id="乘法与除法和日常计算逻辑一样"><a href="#乘法与除法和日常计算逻辑一样" class="headerlink" title="乘法与除法和日常计算逻辑一样"></a>乘法与除法和日常计算逻辑一样</h3><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051927681.png" alt="image-20230205192730603"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051928775.png" alt="image-20230205192851689"></p>
]]></content>
      <categories>
        <category>必修课</category>
        <category>计算机导论</category>
      </categories>
      <tags>
        <tag>-计算机导论</tag>
      </tags>
  </entry>
  <entry>
    <title>计算思维-算法基础</title>
    <url>/2023/02/05/%E8%AE%A1%E7%AE%97%E6%80%9D%E7%BB%B4-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221108133720384.png" alt="image-20221108133720384"></p>
<h3 id="算法的基本特征"><a href="#算法的基本特征" class="headerlink" title="算法的基本特征"></a>算法的基本特征</h3><p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221108133952706.png" alt="image-20221108133952706"></p>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221108134138624.png" alt="image-20221108134138624"></p>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221108134230268.png" alt="image-20221108134230268"></p>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221108134427011.png" alt="image-20221108134427011"></p>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221108134542010.png" alt="image-20221108134542010"></p>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221108135442184.png" alt="image-20221108135442184"></p>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221108140337883.png" alt="image-20221108140337883"></p>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221108140750921.png" alt="image-20221108140750921"></p>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221108141501966.png" alt="image-20221108141501966"><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221108142313953.png" alt="image-20221108142313953"></p>
<p><strong>冒泡算法</strong></p>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221108145442658.png" alt="image-20221108145442658"></p>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221108145629290.png" alt="image-20221108145629290"></p>
<p>插空算法</p>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221108150700648.png" alt="image-20221108150700648"></p>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221108154926039.png" alt="image-20221108154926039"></p>
<p>二分查找法</p>
<p>具体见第六章55页</p>
]]></content>
      <categories>
        <category>必修课</category>
        <category>计算机导论</category>
      </categories>
      <tags>
        <tag>-计算机导论</tag>
      </tags>
  </entry>
  <entry>
    <title>图灵机与冯诺依曼结构</title>
    <url>/2023/02/05/%E5%9B%BE%E7%81%B5%E6%9C%BA%E4%B8%8E%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="图灵机模型"><a href="#图灵机模型" class="headerlink" title="图灵机模型"></a>图灵机模型</h2><p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221025134944918.png" alt="image-20221025134944918"></p>
<p>改为数字是指指针把当前纸袋数字改写</p>
<p>本图的程序将连续的1之后的0修改为1</p>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221025140315220.png" alt="image-20221025140315220"></p>
<p>这是表示图</p>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221025140544377.png" alt="image-20221025140544377"></p>
<p>这是作业</p>
<p>b是空格,H是停止</p>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221025140742764.png" alt="image-20221025140742764"></p>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221025142851890.png" alt="image-20221025142851890"></p>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221025143202427.png" alt="image-20221025143202427"></p>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221025143514451.png" alt="image-20221025143514451"></p>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221025155841187.png" alt="image-20221025155841187"></p>
<p>这个图就是哪边底下有东西哪边就是1</p>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221025145844113.png" alt="image-20221025145844113"></p>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221025145850682.png" alt="image-20221025145850682"></p>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221025145855848.png" alt="image-20221025145855848"></p>
]]></content>
      <categories>
        <category>必修课</category>
        <category>计算机导论</category>
      </categories>
      <tags>
        <tag>-计算机导论</tag>
      </tags>
  </entry>
  <entry>
    <title>逻辑运算</title>
    <url>/2023/02/05/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h2 id="逻辑非"><a href="#逻辑非" class="headerlink" title="逻辑非"></a>逻辑非</h2><p>A为真,那么!A或者A上加一横线</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051947540.png" alt="image-20230205194723467"></p>
<h2 id="逻辑与-都为真才为真"><a href="#逻辑与-都为真才为真" class="headerlink" title="逻辑与-都为真才为真"></a>逻辑与-都为真才为真</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051947497.png" alt="image-20221018135110409"></p>
<h2 id="逻辑或-都为假才为假-这个或这个"><a href="#逻辑或-都为假才为假-这个或这个" class="headerlink" title="逻辑或-都为假才为假(这个或这个)"></a>逻辑或-都为假才为假(这个或这个)</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051947499.png" alt="image-20221018135412120"></p>
<p>二有一或者二都有就是或</p>
<h2 id="逻辑异或-一真一假才为真"><a href="#逻辑异或-一真一假才为真" class="headerlink" title="逻辑异或-一真一假才为真"></a>逻辑异或-一真一假才为真</h2><p>只能一真一假</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051947500.png" alt="image-20221018135727079"></p>
<p>异或的符号</p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051947501.png" alt="image-20221018135755109"></p>
<h2 id="这套理论的使用"><a href="#这套理论的使用" class="headerlink" title="这套理论的使用"></a>这套理论的使用</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051947502.png" alt="image-20221018141148058"></p>
<h2 id="布尔代数与门电路"><a href="#布尔代数与门电路" class="headerlink" title="布尔代数与门电路"></a>布尔代数与门电路</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051947503.png" alt="image-20221018144020230"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051947504.png" alt="image-20221018150959041"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051947505.png" alt="image-20221018144736839"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051947506.png" alt="image-20221018144758747"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051947507.png" alt="image-20221018144814136"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051947508.png" alt="image-20221018144823845"><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051947509.png" alt="image-20221018144829472"></p>
<h2 id="逻辑电路"><a href="#逻辑电路" class="headerlink" title="逻辑电路"></a>逻辑电路</h2><p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051947510.png" alt="image-20221018152913475"><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051947511.png" alt="image-20221018152919287"><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051947512.png" alt="image-20221018152925369"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051947513.png" alt="image-20221018152933126"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051947514.png" alt="image-20221018152939671"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051947515.png" alt="image-20221025145431257"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051947516.png" alt="image-20221025145844113"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051947517.png" alt="image-20221025145850682"></p>
<p><img src="https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202302051947518.png" alt="image-20221025145855848"></p>
]]></content>
      <categories>
        <category>必修课</category>
        <category>计算机导论</category>
      </categories>
      <tags>
        <tag>-计算机导论</tag>
      </tags>
  </entry>
  <entry>
    <title>计算思维</title>
    <url>/2023/02/05/%E8%AE%A1%E7%AE%97%E6%80%9D%E7%BB%B4/</url>
    <content><![CDATA[<h2 id="计算思维"><a href="#计算思维" class="headerlink" title="计算思维"></a>计算思维</h2><p>将现实的问题模型化</p>
<ul>
<li>枚举法</li>
<li>贪心法  DIJkstra(必考)</li>
</ul>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221101151748686.png" alt="image-20221101151748686"></p>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221101155527053.png" alt="image-20221101155527053"></p>
<p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221101155555035.png" alt="image-20221101155555035"></p>
<p>一旦该点被标记,就不再计算</p>
<p>如果是相同的节点(1,2,3$1,2,4,3),要做比大小</p>
<ul>
<li><p>分治法</p>
</li>
<li><p><img src="C:\Users\ECHO\AppData\Roaming\Typora\typora-user-images\image-20221101183847280.png" alt="image-20221101183847280"></p>
</li>
<li><p>动态规划法</p>
</li>
</ul>
<p><a href="https://zhuanlan.zhihu.com/p/28594231">汉诺塔怎么玩？这可能是最简单的方法了 - 知乎 (zhihu.com)</a></p>
]]></content>
      <categories>
        <category>必修课</category>
        <category>计算机导论</category>
      </categories>
      <tags>
        <tag>-计算机导论</tag>
      </tags>
  </entry>
</search>
